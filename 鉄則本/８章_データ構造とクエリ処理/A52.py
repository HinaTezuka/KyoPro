from collections import deque

# 入力
Q = int(input()) # クエリ数
queries = [ input().split() for i in range(Q) ] # クエリの情報（各要素は ["1", 名前を表す文字列] or ["2"] or ["3"]）

# クエリの処理
T = deque()
for q in queries:
	if q[0] == "1":
		T.append(q[1])
	if q[0] == "2":
		print(T[0])
	if q[0] == "3":
		T.popleft()

# collectionsのdequeとリストによるスタック、キューの実装について
"""
公式ドキュメントより。

Deque はどちらの側からも append と pop が可能で、スレッドセーフでメモリ効率がよく、
どちらの方向からもおよそ O(1) のパフォーマンスで実行できます。
list オブジェクトでも同様の操作を実現できますが、これは高速な固定長の操作に特化されており、
内部のデータ表現形式のサイズと位置を両方変えるような pop(0) や insert(0, v) などの操作ではメモリ移動のために O(n) のコストを必要とします。
collections.deque --- コンテナデータ型 — Python 3.11.4 ドキュメント

一方、両端以外の要素に対する[]によるアクセス（取得）はリストのほうが有利。
（dequeは）d[0] のような添字による参照をサポートしています。
添字によるアクセスは、両端の要素では O(1) ですが、中央部分の要素では O(n) と遅くなります。高速なランダムアクセスのためには、代わりにリストを使ってください。
"""